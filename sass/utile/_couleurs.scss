// @use "sass"


/*variable sass*/

/*palette de couleur*/

$--clr-bleu-pale    : hsl(220, 100%, 85%);
$--clr-bleu-leger  : hsl(220, 100%, 60%);
$--clr-bleu-moyen  : hsl(220, 100%, 30%);    
$--clr-bleu-fonce  : hsl(220, 100%, 15%);


$--clr-orange-pale: hsl(40, 100%, 85%);
$--clr-orange-leger  : hsl(40, 100%, 50%);
$--clr-orange-moyen  : hsl(40, 100%, 30%);
$--clr-orange-fonce  : hsl(40, 100%, 15%);

$--clr-rouge-pale: hsl(10, 100%, 85%);
$--clr-rouge-leger  : hsl(10, 100%, 50%);
$--clr-rouge-moyen  : hsl(10, 100%, 30%);
$--clr-rouge-fonce  : hsl(10, 100%, 15%);

$--clr-vert-pale: hsl(70, 100%, 85%);
$--clr-vert-leger  : hsl(70, 100%, 50%);
$--clr-vert-moyen  : hsl(70, 100%, 30%);
$--clr-vert-fonce  : hsl(70, 100%, 15%);

/*A partir des variables de couleurs de la palette choisi on un mapping en 
catégorisant les differentes couleurs,
ce map contient un map principal et pusieurs sous map*/
$defaut: (
    primaire : (
        100: $--clr-bleu-pale,
        200: $--clr-bleu-leger,
        300: $--clr-bleu-moyen,
        400: $--clr-bleu-fonce
    ),
    secondaire : (
        100: $--clr-orange-pale,
        200: $--clr-orange-leger,
        300: $--clr-orange-moyen,
        400: $--clr-orange-fonce
    ),
    ternaire : (
        100: $--clr-rouge-pale,
        200: $--clr-rouge-leger,
        300: $--clr-rouge-moyen,
        400: $--clr-rouge-fonce
    ),
    vert : (
        100: $--clr-vert-pale,
        200: $--clr-vert-leger,
        300: $--clr-vert-moyen,
        400: $--clr-vert-fonce
    )
);
/*agencement de couleur*/
$agencement-couleur :(
    primaire: ($--clr-bleu-fonce, ($--clr-bleu-pale, $--clr-bleu-leger)),
    secondaire: ($--clr-orange-fonce, $--clr-orange-pale),
    ternaire: ($--clr-rouge-fonce, $--clr-rouge-pale),
    vert: ($--clr-vert-fonce, $--clr-vert-pale)
);







:root {

  /* Calcul des teintes) */
  --u1 : 186; // couleur initiale
  --u2 : calc(var(--u1) + 36); // couleur complémentaire
  --u3 : calc(var(--u2) - 15); // couleur analogue gauche
  --u4 : calc(var(--u2) + 15); // couleur analogue droite
  /* La saturation */
  --s-arriere : 100%;
  --s-avant : 50%;
  /* la luminosité */
  --l-arriere : 30%;
  --l-avant : 20%;
 
/* couleur avant plan  - color  */
  
  --couleur-entete: hsl(var(--u1), 100%, 50%);
  --couleur-accueil:hsl(var(--u1), 19%, 69%);
  --couleur-evenement:hsl(39, 92%, 57%);
  --couleur-galerie: hsl(var(--u4),var(--s-avant), var(--l-avant));
  --couleur-footer: hsl(var(--u1),var(--s-avant), var(--l-avant));
  // couleur monochrome
  --couleur-arriere-menu: hsl(var(--u1),100%,30%);
  --couleur-arriere-entete: hsl(var(--u1),100%,70%);
  --couleur-arriere-accueil:hsl(var(--u1),100%,75%);
 
  --couleur-arriere-footer: hsl(var(--u1),100%,70%);

 --couleur-arriere-evenement: var(--couleur-arriere-accueil);
  --couleur-arriere-galerie: var(--couleur-arriere-accueil);

}
/*variable local*/
.carte{
  --_couleur-arrier: hsl(var(--u1),100%,85%)
}

/*création de classe de couleur*/
@each $nom, $couleurs in $defaut {
  @each $valeur, $couleur in $couleurs {
      .clr-#{$nom}-#{$valeur} {
          color : #{$couleur};
         
      }
          .bck-#{$nom}-#{$valeur} {
        
          background-color:  #{$couleur} ;
      }
  }
  }
  /*mixim pour agencer les couleurs*/
  @mixin couleur-agencement($clr,$bck){
    color: $clr;
    @if(list.length($bck)==1){
        background-color: $bck;
    }   @else {
        background-image: linear-gradient(90deg, $bck);
    }   
}
@each $valeur, $clr in $agencement-couleur {
  .clr-agencement-#{$valeur} {
      @include couleur-agencement($clr...);
  }
} 




